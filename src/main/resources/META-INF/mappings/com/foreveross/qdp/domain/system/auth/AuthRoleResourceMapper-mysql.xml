<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="AuthRoleResource">
	<resultMap id="AuthRoleResource" type="com.foreveross.qdp.domain.system.auth.AuthRoleResource">
        <id     property="id"         column="ID"/>                       
        <result property="roleId"     column="ROLE_ID"/>                  
        <result property="resourceId" column="RESOURCE_ID"/>              
        <result property="createTime" column="CREATE_TIME"/>              
        <result property="updateTime" column="UPDATE_TIME"/>              

	</resultMap>
	<sql id="orderBy">
		<if test="page !=null and page.orderBy!=null">
			<bind name="fieldColMap" value="#{
           'ID'          : 'ID'         ,
           'ROLEID'      : 'ROLE_ID'    ,
           'ROLE_ID'     : 'ROLE_ID'    ,
           'RESOURCEID'  : 'RESOURCE_ID',
           'RESOURCE_ID' : 'RESOURCE_ID',
           'CREATETIME'  : 'CREATE_TIME',
           'CREATE_TIME' : 'CREATE_TIME',
           'UPDATETIME'  : 'UPDATE_TIME',
           'UPDATE_TIME' : 'UPDATE_TIME'

			}"/>
			<bind name="orderMap" value="#{'ASC':'ASC', 'DESC':'DESC'}"/>
			<trim prefix="order by " suffixOverrides=",">
				<foreach item="item" index="index" collection="page.orderBy" separator=",">
					<if test="item != null and item.name !=null and (fieldColMap[item.name.toUpperCase()] != null or orderMap[item.order.toUpperCase()]!=null)">${aliasDot}${fieldColMap[item.name.toUpperCase()]} ${orderMap[item.order.toUpperCase()]}</if>
				</foreach>
			</trim>
		</if>
	</sql>
	<select id="getAuthRoleResourceById" parameterType="com.foreveross.qdp.domain.system.auth.AuthRoleResource" resultMap="AuthRoleResource">
		SELECT * 
		FROM AUTH_ROLE_RESOURCE
		<where>
				AND ID = #{id,jdbcType=VARCHAR}
		</where>
	</select>
	<select id="getAuthRoleResourceMapById" parameterType="com.foreveross.qdp.domain.system.auth.AuthRoleResource" resultType="hashmap">
		SELECT 
           AuthRoleResource.ID           AS  id                          ,
           AuthRoleResource.ROLE_ID      AS  roleId                      ,
           AuthRoleResource.RESOURCE_ID  AS  resourceId                  ,
           AuthRoleResource.CREATE_TIME  AS  createTime                  ,
           AuthRoleResource.UPDATE_TIME  AS  updateTime                  ,
           roleIdAuthRole.NAME           AS  roleIdName                  ,
           resourceIdAuthResource.NAME   AS  resourceIdName              

		FROM AUTH_ROLE_RESOURCE AuthRoleResource
		LEFT JOIN AUTH_ROLE roleIdAuthRole             ON AuthRoleResource.ROLE_ID     = roleIdAuthRole.ID                                                             
		LEFT JOIN AUTH_RESOURCE resourceIdAuthResource ON AuthRoleResource.RESOURCE_ID = resourceIdAuthResource.ID                                                     

		<where>
				AND authRoleResource.ID = #{id,jdbcType=VARCHAR}
		</where>
	</select>
	<select id="pageFindAuthRoleResource" resultMap="AuthRoleResource">
		SELECT *
		FROM AUTH_ROLE_RESOURCE
		<where>
           <if test="vo!=null and vo.id != null and vo.id != ''                 "> AND ID = #{vo.id,jdbcType=VARCHAR} </if>                            
           <if test="vo!=null and vo.roleId != null and vo.roleId != ''         "> AND ROLE_ID LIKE CONCAT('%',#{vo.roleId,jdbcType=VARCHAR},'%') </if>
           <if test="vo!=null and vo.resourceId != null and vo.resourceId != '' "> AND RESOURCE_ID LIKE CONCAT('%',#{vo.resourceId,jdbcType=VARCHAR},'%') </if>
           <if test="vo!=null and vo.createTime != null and vo.createTime != '' "> AND CREATE_TIME = #{vo.createTime,jdbcType=VARCHAR} </if>           
           <if test="vo!=null and vo.updateTime != null and vo.updateTime != '' "> AND UPDATE_TIME = #{vo.updateTime,jdbcType=VARCHAR} </if>           

		</where>
		<bind name="aliasDot" value="''"/><include refid="orderBy"/>
	</select>
	<select id="pageFindAuthRoleResourceMap" resultType="hashmap">
		SELECT 
           AuthRoleResource.ID           AS  id                          ,
           AuthRoleResource.ROLE_ID      AS  roleId                      ,
           AuthRoleResource.RESOURCE_ID  AS  resourceId                  ,
           AuthRoleResource.CREATE_TIME  AS  createTime                  ,
           AuthRoleResource.UPDATE_TIME  AS  updateTime                  ,
           roleIdAuthRole.NAME           AS  roleIdName                  ,
           resourceIdAuthResource.NAME   AS  resourceIdName              ,
           resourceIdAuthResource.CODE   AS  resourceIdCode              

		FROM AUTH_ROLE_RESOURCE AuthRoleResource
		LEFT JOIN AUTH_ROLE roleIdAuthRole             ON AuthRoleResource.ROLE_ID     = roleIdAuthRole.ID                                                             
		LEFT JOIN AUTH_RESOURCE resourceIdAuthResource ON AuthRoleResource.RESOURCE_ID = resourceIdAuthResource.ID                                                     

		<where>
           <if test="vo!=null and vo.id != null and vo.id != ''                 "> AND AuthRoleResource.ID = #{vo.id,jdbcType=VARCHAR} </if>           
           <if test="vo!=null and vo.roleId != null and vo.roleId != ''         "> AND AuthRoleResource.ROLE_ID LIKE CONCAT('%',#{vo.roleId,jdbcType=VARCHAR},'%') </if>
           <if test="vo!=null and vo.resourceId != null and vo.resourceId != '' "> AND AuthRoleResource.RESOURCE_ID LIKE CONCAT('%',#{vo.resourceId,jdbcType=VARCHAR},'%') </if>
           <if test="vo!=null and vo.createTime != null and vo.createTime != '' "> AND AuthRoleResource.CREATE_TIME = #{vo.createTime,jdbcType=VARCHAR} </if>
           <if test="vo!=null and vo.updateTime != null and vo.updateTime != '' "> AND AuthRoleResource.UPDATE_TIME = #{vo.updateTime,jdbcType=VARCHAR} </if>

		</where>
		<bind name="aliasDot" value="'AuthRoleResource.'"/><include refid="orderBy"/>
	</select>
	<insert id="insertAuthRoleResource" parameterType="com.foreveross.qdp.domain.system.auth.AuthRoleResource"  useGeneratedKeys="true" keyProperty="id" >
		INSERT INTO AUTH_ROLE_RESOURCE
			( ID, ROLE_ID, RESOURCE_ID, CREATE_TIME, UPDATE_TIME )
		VALUES
			(
           #{id,jdbcType=VARCHAR},
           #{roleId,jdbcType=VARCHAR},
           #{resourceId,jdbcType=VARCHAR},
           #{createTime,jdbcType=VARCHAR},
           #{updateTime,jdbcType=VARCHAR}

			)
	</insert>
	<update id="updateAuthRoleResource" parameterType="com.foreveross.qdp.domain.system.auth.AuthRoleResource">
		UPDATE AUTH_ROLE_RESOURCE
		<set>
           <if test="id != null         "> ID = #{id,jdbcType=VARCHAR},</if>
           <if test="roleId != null     "> ROLE_ID = #{roleId,jdbcType=VARCHAR},</if>
           <if test="resourceId != null "> RESOURCE_ID = #{resourceId,jdbcType=VARCHAR},</if>
           <if test="createTime != null "> CREATE_TIME = #{createTime,jdbcType=VARCHAR},</if>
           <if test="updateTime != null "> UPDATE_TIME = #{updateTime,jdbcType=VARCHAR},</if>

		</set>
		<where>
				AND ID = #{id,jdbcType=VARCHAR}
		</where>
	</update>
	<delete id="deleteAuthRoleResource" parameterType="com.foreveross.qdp.domain.system.auth.AuthRoleResource">
		DELETE FROM AUTH_ROLE_RESOURCE
		<where>
				AND ID = #{id,jdbcType=VARCHAR}
		</where>
	</delete>
</mapper>
